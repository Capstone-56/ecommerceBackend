# Generated by Django 5.2 on 2025-05-03 12:26

import base.managers
import django.contrib.postgres.fields
import django.db.models.deletion
import mptt.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AddressBookModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('addressLine', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('postcode', models.CharField(max_length=10)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'addressBook',
            },
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('images', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1000), blank=True, size=None)),
                ('featured', models.BooleanField(default=False)),
                ('avg_rating', models.FloatField(blank=True, db_column='avg_rating', null=True)),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('firstName', models.CharField(max_length=255)),
                ('lastName', models.CharField(max_length=255)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('seller', 'Seller'), ('admin', 'Admin')], default='customer', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', base.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CategoryModel',
            fields=[
                ('internalName', models.CharField(editable=False, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parentCategory', mptt.fields.TreeForeignKey(blank=True, db_column='parentCategory', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='base.categorymodel')),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='ProductItemModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sku', models.CharField(max_length=255)),
                ('stock', models.IntegerField()),
                ('price', models.FloatField()),
                ('image_urls', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1000), blank=True, size=None)),
                ('product', models.ForeignKey(db_column='productId', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='base.productmodel')),
            ],
            options={
                'db_table': 'productItem',
            },
        ),
        migrations.CreateModel(
            name='VariationTypeModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('category', models.ForeignKey(blank=True, db_column='categoryID', null=True, on_delete=django.db.models.deletion.CASCADE, to='base.categorymodel')),
            ],
            options={
                'db_table': 'variationType',
            },
        ),
        migrations.CreateModel(
            name='VariantModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=255)),
                ('variationType', models.ForeignKey(db_column='variationTypeId', on_delete=django.db.models.deletion.CASCADE, to='base.variationtypemodel')),
            ],
            options={
                'db_table': 'variant',
            },
        ),
        migrations.CreateModel(
            name='ProductCategoryModel',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('category', models.ForeignKey(db_column='categoryId', on_delete=django.db.models.deletion.CASCADE, related_name='product_links', to='base.categorymodel')),
                ('product', models.ForeignKey(db_column='productId', on_delete=django.db.models.deletion.CASCADE, related_name='category_links', to='base.productmodel')),
            ],
            options={
                'db_table': 'productCategory',
                'unique_together': {('product', 'category')},
            },
        ),
        migrations.CreateModel(
            name='UserAddressModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('isDefault', models.BooleanField(default=False)),
                ('address', models.ForeignKey(db_column='addressId', on_delete=django.db.models.deletion.CASCADE, related_name='address_users', to='base.addressbookmodel')),
                ('user', models.ForeignKey(db_column='userId', on_delete=django.db.models.deletion.CASCADE, related_name='user_addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'userAddress',
                'unique_together': {('user', 'address')},
            },
        ),
        migrations.CreateModel(
            name='ProductConfigModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_item', models.ForeignKey(db_column='productItemId', on_delete=django.db.models.deletion.CASCADE, to='base.productitemmodel')),
                ('variant', models.ForeignKey(db_column='variantId', on_delete=django.db.models.deletion.CASCADE, to='base.variantmodel')),
            ],
            options={
                'db_table': 'productConfig',
                'unique_together': {('product_item', 'variant')},
            },
        ),
    ]
