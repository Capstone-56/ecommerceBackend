"""
Django settings for ecommerceBackend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from base import Constants
from dotenv import load_dotenv
import socket

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY=os.getenv("JWT_SECRET_KEY", "django-insecure-2sv!-pb6m8^gach8^p0b4v)z1!(uri74&k59jotkyc5(07_-ab")

def get_environment():
    """Auto-detect environment"""
    env = os.environ.get('ENVIRONMENT')
    if env:
        return env.lower()

    hostname = socket.gethostname()
    if 'ip-' in hostname or 'ec2' in hostname.lower():
        return 'staging'
    return 'local'


ENVIRONMENT = get_environment()
IS_LOCAL = ENVIRONMENT == 'local'
IS_STAGING = ENVIRONMENT == 'staging'
DEBUG = IS_LOCAL    # SECURITY WARNING: don't run with debug turned on in production!

print(f"Environment: {ENVIRONMENT}")

# TODO: reduce this to necessary connections only
ALLOWED_HOSTS = [
    "3.25.193.75",
    "ec2-3-25-193-75.ap-southeast-2.compute.amazonaws.com",
    "localhost",
    "127.0.0.1",
    "172.31.13.60",
    "*"
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'mptt',
    "rest_framework",
    "base",

    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "api.middleware.RefreshCookieMiddleware",
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# TODO: reduce this to necessary connections only
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://3.25.193.75",
    "http://ec2-3-25-193-75.ap-southeast-2.compute.amazonaws.com",
    "https://3.25.193.75",
    "https://ec2-3-25-193-75.ap-southeast-2.compute.amazonaws.com",
    "https://dev.d5b52nnp5ggvx.amplifyapp.com",
    "https://bdnx.com",
    "https://www.bdnx.com",
]

CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ["X-Clear-Auth-State"]
# TODO: reduce this to necessary connections only
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://3.25.193.75",
    "http://ec2-3-25-193-75.ap-southeast-2.compute.amazonaws.com",
    "https://3.25.193.75", 
    "https://ec2-3-25-193-75.ap-southeast-2.compute.amazonaws.com",
    "https://dev.d5b52nnp5ggvx.amplifyapp.com",
    "https://bdnx.com",
    "https://www.bdnx.com",
]
CSRF_COOKIE_SECURE   = True
CSRF_COOKIE_SAMESITE = Constants.CookiePolicy.SAME_SITE
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE   = True
SESSION_COOKIE_SAMESITE = Constants.CookiePolicy.SAME_SITE
SESSION_COOKIE_HTTPONLY = True

ROOT_URLCONF = 'ecommerceBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerceBackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.environ.get("DB_NAME", "ecommerce_db"),
        "USER": os.environ.get("DB_USER", "ecommerce_admin"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "capstone56"),
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' # integer is the default field for a table's primary key

APPEND_SLASH=False  # By default, DRF's endpoints have slash at the end (e.g, /api/product/), we're disabling this

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",

    "PAGE_SIZE": Constants.DEFAULT_PAGINATOR_PAGE_SIZE,

    "DEFAULT_AUTHENTICATION_CLASSES": [
        "authentication.refresh_authentication.RefreshAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],

    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],

    # JSON first, then browsable API
    "DEFAULT_RENDERER_CLASSES": (
        ["rest_framework.renderers.JSONRenderer"]
        if IS_STAGING
        else ["rest_framework.renderers.JSONRenderer", "rest_framework.renderers.BrowsableAPIRenderer"]
    ),

    # Set JSON as default content type
    "DEFAULT_CONTENT_NEGOTIATION_CLASS": "rest_framework.negotiation.DefaultContentNegotiation"
}

# TODO: create a JWT secret key for staging/prod and store in env variable
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("Bearer",),
    "ACCESS_TOKEN_LIFETIME": Constants.ACCESS_TOKEN_LIFETIME,
    "REFRESH_TOKEN_LIFETIME": Constants.REFRESH_TOKEN_LIFETIME,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY
}

AUTH_USER_MODEL = "base.UserModel"

# Pepper used in hashing (dev env)
# TODO: create a pepper for staging/prod and store in env variable
PEPPER = os.environ.get("PASSWORD_PEPPER", "A6vN3rZt5KqLp8UwXy9T0bGhJf2EsMc1QrZn7PdCiVoLwAxYeBuTsNgKhMfRxCvJ")

# Use the custom password hasher
PASSWORD_HASHERS = [
    "base.password_hasher.BCryptPepperHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",  # fallback
]

# 24 hours for token expiry
PASSWORD_RESET_TIMEOUT = 86400

FRONTEND_URL_LOCAL = "http://localhost:5173"
FRONTEND_URL_PROD = "https://dev.d5b52nnp5ggvx.amplifyapp.com" # TODO: change back to bdnx.com or its sub-domain

# Stripe keys
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")

# AWS Secrets.
AWS_S3_BUCKET_NAME = os.getenv("AWS_S3_BUCKET_NAME")
AWS_REGION = os.getenv("AWS_REGION")
AWS_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY")
AWS_SECRET_KEY = os.getenv("AWS_SECRET_KEY")
AWS_CLOUD_FRONT_DOMAIN = os.getenv("AWS_CLOUD_FRONT_DOMAIN")
